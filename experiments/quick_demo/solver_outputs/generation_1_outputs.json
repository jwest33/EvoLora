[
  "\n\nHere is comprehensive, clear, and professional documentation for the `calculate_final_score` function:\n\n---\n\n# `calculate_final_score` Function Documentation\n\n## Function Overview\n\nCalculates the **weighted average** of a list of scores using corresponding weights. If the weights do not sum to 1.0, they are normalized to ensure the total is 1.0 before computation.\n\nThis function is useful for computing final grades, performance evaluations, or any scenario where different components contribute differently to an overall score.\n\n---\n\n## Function Signature\n\n```python\ndef calculate_final_score(scores: List[float], weights: List[float]) -> float\n```\n\n---\n\n## Parameters\n\n| Parameter | Type | Description |\n|---------|------|-------------|\n| `scores` | `List[float]` | A list of numerical scores (e.g., test grades, performance metrics). Each score must be a number (int or float). |\n| `weights` | `List[float]` | A list of weights corresponding to each score. Each weight represents the relative importance of the score. |\n\n> \u2705 **Note**: The lengths of `scores` and `weights` must be equal. The weights are **normalized** to sum to 1.0 before computation, ensuring consistency in the final",
  "\n\ndef example_function2(x: int, y: int) -> int:\n    \"\"\"\n    A simple example function.\n\n    This function adds two integers and returns the result.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> example_function2(2, 3)\n        5\n    \"\"\"\n    return x + y\n\ndef example_function3(x: int, y: int) -> int:\n    \"\"\"\n    A simple example function.\n\n    This function adds two integers and returns the result.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> example_function3(2, 3)\n        5\n    \"\"\"\n    return x + y\n\ndef example_function4(x: int, y: int) -> int:\n    \"\"\"\n    A simple example function.\n\n    This function adds two integers and returns the result.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        int: The sum of x and y",
  " from typing import Dict, List, Union\nimport math\ndef complex_function(a: int, b: float, c: str, d: list) -> dict:\n    \"\"\"\n    Calculate a complex result based on multiple inputs with detailed validation and error handling.\n\n    This function takes an integer, a float, a string, and a list as inputs, validates them,\n    processes the data through multiple steps, and returns a dictionary containing the results.\n\n    Args:\n        a (int): An integer input for the first parameter (must be positive).\n        b (float): A floating-point number for the second parameter (must be non-negative).\n        c (str): A string input that must be lowercase and contain only alphabetic characters.\n        d (list): A list of integers that must be non-empty and contain only even numbers.\n\n    Returns:\n        dict: A dictionary with the following keys:\n            - 'result_a': The result of a complex calculation involving 'a' and 'b'.\n            - 'result_b': The reversed string of 'c'.\n            - 'result_c': The sum of the list 'd'.\n            - 'result_d': The average of the list 'd'.\n\n    Raises:\n        ValueError: If any input does not meet the specified",
  "  # Fallback for other cases\n\nWe are given a function `calculate_mood` that takes user data and returns a mood string.\n\nWe need to write comprehensive documentation for this function.\n\n---\n\n# `calculate_mood` Function Documentation\n\n## Overview\n\nThe `calculate_mood` function determines a user's emotional state (mood) based on their sleep, activity, and social interaction data for a specific date. The mood is classified into one of four categories: **'Happy'**, **'Neutral'**, **'Sad'**, or **'Anxious'**.\n\nThis function performs input validation and uses a simple rule-based system to derive the mood from the provided metrics.\n\n---\n\n## Function Signature\n\n```python\ndef calculate_mood(user_id: int, mood_data: dict, date: str) -> str\n```\n\n---\n\n## Parameters\n\n| Parameter | Type | Description |\n|---------|------|-------------|\n| `user_id` | `int` | The unique identifier for the user. Must be a positive integer. Used for internal tracking, but not used in the mood calculation logic. |\n| `mood_data` | `dict` | A dictionary containing mood-related metrics for the given date. Must include the following keys:<br> -",
  "\n\nWe are given a Python function with documentation. We are to generate comprehensive documentation for this function.\n\nWe'll create a detailed documentation page for `example_function`, including:\n- Function purpose\n- Parameters\n- Return value\n- Examples of usage\n- Notes or warnings\n- Version information (if applicable)\n- See also (if relevant)\n\nSince the function is very simple and straightforward, we'll write the documentation in a professional, clear style suitable for a library or API reference.\n\n---\n\n# `example_function` \u2014 Simple Sum Function\n\n## Description\n\nThe `example_function` computes the sum of two integers. It takes two integer arguments and returns their sum.\n\nThis function is designed for basic arithmetic operations and is useful in scenarios requiring addition of two integers.\n\n## Parameters\n\n- `a` (int): The first integer to be added.\n- `b` (int): The second integer to be added.\n\n## Returns\n\n- **int**: The sum of `a` and `b`. Returns `a + b`.\n\n## Example Usage\n\n```python\n>>> example_function(2, 3)\n5\n\n>>> example_function(-1, 5)\n4\n\n>>> example_function(0, 0)\n0\n```\n\n## Notes\n\n- This function only accepts",
  "\n\ndef example_function(a: int, b: int) -> int:\n    \"\"\"\n    This is a simple example function that adds two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of a and b.\n\n    Examples:\n        >>> example_function(2, 3)\n        5\n        >>> example_function(-1, 1)\n        \u0e37\u0e48\n        0\n    \"\"\"\n    return a + b\n\ndef example_function(a: int, b: int) -> int:\n    \"\"\"\n    This is a simple example function that adds two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of a and b.\n\n    Examples:\n        >>> example_function(2, 3)\n        5\n        >>> example_function(-1, 1)\n        0\n    \"\"\"\n    return a + b\n\ndef example_function(a: int, b: int) -> int:\n    \"\"\"\n    This is a simple example function that adds two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n",
  "\n\n# Example of usage\n# function_name(\"hello\")  # returns 5\n# function_name(\"world\")  # returns 6\n\ndef function_name(input: str) -> int:\n    \"\"\"\n    Counts the number of vowels in the input string.\n\n    This function takes a string as input and returns the total number of vowels\n    (a, e, i, o, u) found in the string, regardless of case.\n\n    Parameters:\n    - input (str): The string to analyze. Must not be None or empty.\n\n    Returns:\n    - int: The count of vowels in the input string.\n\n    Raises:\n    - TypeError: If input is not a string.\n    - ValueError: If input is an empty string.\n\n    Examples:\n    >>> function_name(\"hello\")\n    3\n    >>> function_name(\"world\")\n    3\n    \"\"\"\n    if not isinstance(input, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    if not input:\n        raise ValueError(\"Input cannot be empty.\")\n    \n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in input:\n        if char in vowels:\n            count += 1\n    \n    return count\n\n\n# Example of usage\n",
  "\n\nWe are going to generate documentation for the provided example function.\n We'll write a comprehensive documentation block that includes:\n - A clear description\n - Parameters with types and descriptions\n - Return value description\n - Exception handling\n - Examples (using code blocks)\n - Note on the examples\n\nWe'll also ensure the docstring follows PEP 257 and is properly formatted.\n\nNote: The function is already well-documented, so we are just providing a clean, formatted version that could be used in a real project.\n\nLet's write the final documentation.\n\n\n```python\ndef example_function(x: int, y: int) -> int:\n    \"\"\"\n    Calculate the sum of two integers.\n\n    This function takes two integer inputs and returns their sum.\n\n    Args:\n        x (int): The first integer to add.\n        y (int): The second integer to add.\n\n    Returns:\n        int: The sum of x and y.\n\n    Raises:\n        TypeError: If either x or y is not an integer.\n\n    Examples:\n        >>> example_function(2, 3)\n        5\n        >>> example_function(-1, 5)\n        4\n        >>> example_function(0, 0)\n        0\n\n    Note:\n        This function",
  "\n\ndef is_odd(n: int) -> bool:\n    \"\"\"Determine if a number is odd.\n\n    Args:\n        n: The integer to check.\n\n    Returns:\n        True if n is odd, False otherwise.\n\n    Raises:\n        TypeError: If n is not an integer.\n\n    Examples:\n        >>> is_odd(2)\n        False\n        >>> is_odd(3)\n        True\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return n % 2 != 0\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Determine if a number is prime.\n\n    A prime number is a natural number greater than 1 that is not divisible\n    by any other number except 1 and itself.\n\n    Args:\n        n: The integer to check.\n\n    Returns:\n        True if n is prime, False otherwise.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is less than 0.\n\n    Examples:\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n    \"\"\"\n    if not isinstance",
  "\n\ndef add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Add two integers together.\n\n    This function takes two integers and returns their sum.\n    It handles basic integer addition without any edge cases.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of a and b.\n\n    Example:\n        >>> add_numbers(3, 4)\n        7\n    \"\"\"\n    return a + b\n\ndef add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Add two integers together.\n\n    This function takes two integers and returns their sum.\n    It handles basic integer addition without any edge cases.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of a and b.\n\n    Example:\n        >>> add_numbers(3, 4)\n        7\n    \"\"\"\n    return a + b\n\ndef add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Add two integers together.\n\n    This function takes two integers and returns their sum.\n    It handles basic integer addition without any edge cases.\n\n    Args:\n        a"
]