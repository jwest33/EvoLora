[
  "\n\n\ndef calculate_discounted_price(price: float, discount_rate: float, min_purchase: float = 0.0, max_discount: float = 0.0) -> float:\n    \"\"\"\n    Calculate the discounted price after applying a discount rate, with additional constraints.\n\n    This function calculates the final price after applying a discount rate to the original price.\n    It also considers minimum purchase requirements and a maximum allowable discount amount.\n\n    Args:\n        price (float): The original price of the item.\n        discount_rate (float): The discount rate as a decimal (e.g., 0.1 for 10%).\n        min_purchase (float, optional): The minimum purchase amount required to apply the discount. Defaults to 0.0.\n        max_discount (float, optional): The maximum discount amount allowed. Defaults to 0.0.\n\n    Returns:\n        float: The final discounted price after all constraints are applied.\n\n    Raises:\n        ValueError: If the price is negative, discount rate is not between 0 and 1, min_purchase is negative, or max_discount is negative.\n        ValueError: If the discount rate is 0 but min_purchase is greater than 0.\n        ValueError: If the calculated discount exceeds max_discount when max_discount is",
  "\n\n# Example usage\nfunction_name(value1, value2)\n\n# Example output\n# Output: [description of expected output]\n\n# Example error\n# Input: [invalid input]\n# Output: [error message]\n# Error type: [error type]\n\n# Additional notes\n# [Any additional notes or context about the function's behavior or usage]\n\nWe are going to create a comprehensive documentation example for a function.\nWe'll use a realistic scenario: a function that processes a list of numbers and returns the sum, with error handling.\n\n---\n\n## Function Documentation\n\n```python\ndef calculate_sum(numbers: list[int]) -> int:\n    \"\"\"\n    Calculates the sum of a list of integers.\n\n    This function takes a list of integers and returns their total sum. \n    It is designed to handle empty lists gracefully by returning 0. \n    The function includes error handling for invalid inputs such as non-numeric values or non-list types.\n\n    Args:\n        numbers (list[int]): A list of integers to be summed. Must contain only integers.\n                           If the input is not a list, or contains non-integer elements, \n                           an appropriate error is raised.\n\n    Returns:\n        int: The sum of all integers in the input list. Returns 0 for an",
  "\n\n# Example usage:\n# calculate_interest(1000, 0.05, 10, 12)  # 1000 invested at 5% annually, compounded monthly over 10 years\n# calculate_interest(5000, 0.08, 5, 4, 200, 4)  # 5000 initial investment, 200/year added quarterly at 8% annual rate, compounded quarterly\n\n# Note: This function assumes that contributions are made at the end of each period.\n# For end-of-period contributions, the formula uses ordinary annuity.\n# For beginning-of-period contributions, the formula would be adjusted.\n\n# The function does not support fractional periods or irregular contributions.\n# For irregular contributions, a different approach (e.g., day-by-day calculation) is required.\n\n# This function is designed for regular, periodic contributions.\n\n# Limitations:\n# - Does not handle fractional periods (e.g., 1.5 years).\n# - Assumes contributions are made at the end of each period.\n# - Does not support contributions made at the beginning of the period.\n\n# This function is suitable for standard financial calculations involving compound interest with regular contributions",
  "\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do not write anything below this line\n# Do\u0e31\u0e19\u0e17\u0e35\u0e48\u0e40\u0e02\u0e35\u0e22\u0e19\u0e2d\u0e30\u0e44\u0e23\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\ndef generate_complex_function():\n    # \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e17\u0e35\u0e48",
  "\n\n# Example usage:\n# print(calculate_discount(100.0, 10.0))  # Output: 90.0\n# print(calculate_discount(100.0, 10.0, 20.0))  # Output: 80.0\n# print(calculate_discount(100.0, 120.0))  # Raises ValueError: Discount rate must be between 0 and 100.\n# print(calculate_discount(-100.0, 10.0))  # Raises ValueError: Price must be a positive number.\n# print(calculate_discount(100.0, -10.0))  # Raises ValueError: Discount rate must be between 0 and 100.\n\n# The function is designed to be used in pricing logic where a discount is applied to a product.\n# It ensures that the discount does not exceed a predefined maximum, which is useful for preventing excessive discounts.\n# This function can be used in e-commerce platforms, retail systems, or any application that requires discount calculation with constraints.\n```\n\n# Documentation for `calculate_discount` Function\n\n## Overview\n\nThe `calculate_discount` function computes",
  "\n\nWe are given a function that adds two integers. We are to write documentation for this function.\n\nWe can see that the existing docstring already provides a good structure. However, we can enhance it with more details, clarity, and completeness.\n\nHere is the improved and professionally written documentation:\n\n---\n\n```python\ndef example_function(a: int, b: int) -> int:\n    \"\"\"\n    Adds two integers and returns their sum.\n\n    This function takes two integer inputs and returns the sum of the two values.\n    It performs a simple addition and is designed for use with integer inputs.\n\n    Args:\n        a (int): The first integer to be added.\n        b (int): The second integer to be added.\n\n    Returns:\n        int: The sum of a and b.\n\n    Raises:\n        TypeError: If either a or b is not an integer. This includes cases where\n                    the inputs are of type float, string, or any other non-integer type.\n\n    Examples:\n        >>> example_function(3, 5)\n        8\n        >>> example_function(-1, 1)\n        0\n        >>> example_function(0, 0)\n        0\n\n    Notes:\n        - The function does not perform any input validation beyond",
  "\n\nWe are given a Python function and need to write documentation for it.\nThe function already has a docstring, but we are to \"generate documentation\" for it.\n\nLet's analyze what we have:\n\nFunction: example_function(x: int, y: float) -> float\nDescription: Multiplies x by y and returns the result.\n\nCurrent docstring:\n- Explains what the function does.\n- Mentions that it handles edge cases (but notes that multiplication doesn't have division, so that part is a bit confusing).\n- Has input arguments and return value.\n- Includes a TypeError for invalid types.\n\nWe can improve the documentation by making it more comprehensive, clear, and professional.\n\nHere's an improved version of the documentation:\n\n---\n\n```python\ndef example_function(x: int, y: float) -> float:\n    \"\"\"\n    Multiply two numbers and return their product.\n\n    This function takes an integer and a float as input and returns their product.\n\n    Args:\n        x (int): The first number to multiply. Must be an integer.\n        y (float): The second number to multiply. Must be a floating-point number.\n\n    Returns:\n        float: The product of x and y.\n\n    Raises:\n        TypeError: If x is not an integer or y",
  "  # Convert the sum to a string and return it\n\ndef example_function(a: int, b: int, c: int) -> str:\n    \"\"\"\n    A simple example function that adds two numbers and returns the result as a string.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        str: The sum of a, b, and c as a string.\n\n    Raises:\n        ValueError: If any of the inputs are not integers.\n    \"\"\"\n    if not all(isinstance(x, int) for x in [a, b, c]):\n        raise ValueError(\"All inputs must be integers.\")\n    total = a + b + c\n    return str(total)  # Convert the sum to a string and return it\nThe function has a bug. The description says it adds two numbers, but it actually adds three numbers. Please fix the documentation to reflect the actual behavior.\n\nWe are given a function that is described as adding \"two numbers\" but actually adds three numbers (a, b, and c). We need to fix the documentation to correctly reflect the actual behavior.\n\nSteps:\n1. Identify the error: The docstring says \"adds",
  "\n\nWe are given a function that computes the sum of squares of three integers with validation.\n\nWe need to write comprehensive documentation for this function.\n\nThe documentation should include:\n- A clear description of what the function does\n- Parameters (with types and descriptions)\n- Returns value\n- Exceptions raised (with conditions and meaning)\n- Example usage\n- Notes on edge cases or limitations\n\nLet's write the documentation in a professional, clear, and comprehensive style suitable for a library or API reference.\n\n---\n\n```python\ndef complex_function(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the sum of squares of three integers with input validation and overflow protection.\n\n    This function computes the sum of the squares of three given integers. It performs\n    input validation to ensure all inputs are non-negative. Additionally, it checks\n    whether the resulting sum of squares exceeds a predefined threshold (10**18) and\n    raises an OverflowError if so, to prevent potential issues with very large numbers\n    or to enforce a reasonable range.\n\n    The function is designed for use in mathematical computations where large numbers\n    might be involved, and it ensures that invalid inputs are rejected early.\n\n    Args:\n        a (int): First integer input",
  "\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data: list of dictionaries with numeric values\n    sample_data = [\n        {\"height\": 170, \"weight\": 65, \"age\": 30},\n        {\"height\": 175, \"weight\": 70, \"age\": 32},\n        {\"height\": 180, \"weight\": 75, \"age\": 35},\n        {\"height\": 165, \"weight\": 60, \"age\": 28},\n        {\"height\": 172, \"weight\": 68, \"age\": 31}\n    ]\n    \n    # Calculate averages\n    result = calculate_averages(sample_data)\n    \n    # Output the result\n    print(\"Average values:\")\n    for key, avg in result.items():\n        print(f\"{key}: {avg}\")\n    \n    # Demonstrate error handling\n    invalid_data = [\n        {\"height\": 170, \"weight\": \"invalid\", \"age\": 30},\n        {\"height\": 175, \"weight\": 70, \"age\": 32}\n    ]\n    \n   "
]